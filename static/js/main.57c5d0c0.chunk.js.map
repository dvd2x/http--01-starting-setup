{"version":3,"sources":["axios.js","components/Post/Post.js","containers/Blog/Posts/Posts.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["instance","axios","create","baseURL","defaults","headers","common","post","props","className","onClick","clicked","title","author","Posts","state","posts","postSelectedHandler","id","setState","selectedPostId","get","then","response","updatedPosts","data","slice","map","catch","error","console","log","style","textAlign","this","key","Component","Blog","href","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","interceptors","request","use","Promise","reject","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.57c5d0c0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com\"\r\n});\r\n\r\ninstance.defaults.headers.common[\"Authorization\"] = \"AUTH TOKEN FROM INSTANCE\";\r\n\r\n//instance.interceptors.request...\r\n\r\nexport default instance;\r\n","import React from \"react\";\n\nimport \"./Post.css\";\n\nconst post = props => (\n  <article className=\"Post\" onClick={props.clicked}>\n    <h1>{props.title}</h1>\n    <div className=\"Info\">\n      <div className=\"Author\">{props.author}</div>\n    </div>\n  </article>\n);\n\nexport default post;\n","import React, { Component } from \"react\";\r\nimport axios from \"../../../axios\";\r\n\r\nimport Post from \"../../../components/Post/Post\";\r\nimport \"./Posts.css\";\r\n\r\nclass Posts extends Component {\r\n  state = {\r\n    posts: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"/posts/\")\r\n      .then(response => {\r\n        const posts = response.data.slice(0, 4);\r\n        const updatedPosts = posts.map(post => {\r\n          return {\r\n            ...post,\r\n            author: \"Max\"\r\n          };\r\n        });\r\n        this.setState({ posts: updatedPosts });\r\n        //console.log(response);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        //this.setState({ error: true });\r\n      });\r\n  }\r\n\r\n  postSelectedHandler = id => {\r\n    this.setState({ selectedPostId: id });\r\n  };\r\n\r\n  render() {\r\n    let posts = <p style={{ textAlign: \"center\" }}>Something went wrong!</p>;\r\n    if (!this.state.error) {\r\n      posts = this.state.posts.map(post => {\r\n        return (\r\n          <Post\r\n            key={post.id}\r\n            title={post.title}\r\n            author={post.author}\r\n            clicked={() => this.postSelectedHandler(post.id)}\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    return <section className=\"Posts\">{posts}</section>;\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n","import React, { Component } from \"react\";\n//import axios from \"axios\";\n\nimport \"./Blog.css\";\nimport Posts from \"./Posts/Posts\";\n\nclass Blog extends Component {\n  render() {\n    return (\n      <div className=\"Blog\">\n        <header>\n          <nav>\n            <ul>\n              <li>\n                <a href=\"/\">Home</a>\n              </li>\n              <li>\n                <a href=\"/new-post\">New Post</a>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <Posts />\n      </div>\n    );\n  }\n}\n\nexport default Blog;\n","import React, { Component } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Blog from \"./containers/Blog/Blog\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Blog />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://jsonplaceholder.typicode.com\";\naxios.defaults.headers.common[\"Authorization\"] = \"AUTH TOKEN\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n\naxios.interceptors.request.use(\n  request => {\n    console.log(request);\n    //Edit request config\n    return request;\n  },\n  error => {\n    console.log(error);\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  response => {\n    console.log(response);\n    //Edit request config\n    return response;\n  },\n  error => {\n    console.log(error);\n    return Promise.reject(error);\n  }\n);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}