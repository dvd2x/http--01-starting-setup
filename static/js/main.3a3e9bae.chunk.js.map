{"version":3,"sources":["containers/Course/Course.js","containers/Courses/Courses.js","containers/Users/Users.js","components/NoMatch/NoMatch.js","App.js","registerServiceWorker.js","index.js"],"names":["Course","state","courseTitle","this","parseQueryParams","console","log","props","query","URLSearchParams","location","search","entries","param","setState","match","params","courseId","Component","Courses","courses","id","title","className","map","course","Link","key","to","pathname","url","Route","path","component","Users","noMatch","style","textAlign","App","listStyle","margin","padding","display","NavLink","Switch","Redirect","from","NoMatch","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","BrowserRouter","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3a3e9bae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Course extends Component {\n  state = {\n    courseTitle: \"\"\n  };\n\n  componentDidMount() {\n    this.parseQueryParams();\n  }\n\n  componentDidUpdate() {\n    this.parseQueryParams();\n  }\n\n  parseQueryParams() {\n    console.log(this.props);\n    const query = new URLSearchParams(this.props.location.search);\n    for (let param of query.entries()) {\n      if (this.state.courseTitle !== param[1]) {\n        this.setState({ courseTitle: param[1] });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.courseTitle}</h1>\n        <p>\n          You selected the Course with ID: {this.props.match.params.courseId}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Course;\n","import React, { Component } from \"react\";\nimport { Link, Route } from \"react-router-dom\";\n\nimport \"./Courses.css\";\nimport Course from \"../Course/Course\";\n\nclass Courses extends Component {\n  state = {\n    courses: [\n      { id: 1, title: \"Angular - The Complete Guide\" },\n      { id: 2, title: \"Vue - The Complete Guide\" },\n      { id: 3, title: \"PWA - The Complete Guide\" }\n    ]\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Amazing Udemy Courses</h1>\n        <section className=\"Courses\">\n          {this.state.courses.map(course => {\n            return (\n              <Link\n                key={course.id}\n                to={{\n                  pathname: this.props.match.url + \"/\" + course.id,\n                  search: \"?title=\" + course.title\n                }}\n              >\n                <article className=\"Course\">{course.title}</article>\n              </Link>\n            );\n          })}\n        </section>\n        <Route path={this.props.match.url + \"/:courseId\"} component={Course} />\n      </div>\n    );\n  }\n}\n\nexport default Courses;\n","import React, { Component } from \"react\";\n\nclass Users extends Component {\n  render() {\n    return (\n      <div>\n        <h1>The Users Page</h1>\n      </div>\n    );\n  }\n}\n\nexport default Users;\n","import React from \"react\";\r\n\r\nconst noMatch = () => <h1 style={{ textAlign: \"center\" }}>Page not found!</h1>;\r\n\r\nexport default noMatch;\r\n","import React, { Component } from \"react\";\nimport { Route, NavLink, Switch, Redirect } from \"react-router-dom\";\n\nimport Courses from \"./containers/Courses/Courses\";\nimport Course from \"./containers/Course/Course\";\nimport Users from \"./containers/Users/Users\";\nimport NoMatch from \"./components/NoMatch/NoMatch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ol style={{ textAlign: \"left\" }}>\n          <li>\n            Add Routes to load \"Users\" and \"Courses\" on different pages (by\n            entering a URL, without NavLinks)\n          </li>\n          <li>\n            Add a simple navigation with two Navlinks => One leading to \"Users\",\n            one leading to \"Courses\"\n          </li>\n          <li>\n            Make the courses in \"Courses\" clickable by adding a Navlink and load\n            the \"Course\" component in the place of \"Courses\" (without passing\n            any data for now)\n          </li>\n          <li>Pass the course ID to the \"Course\" page and output it there</li>\n          <li>\n            Pass the course title to the \"Course\" page - pass it as a param or\n            score bonus points by passing it as query params (you need to\n            manually parse them though!)\n          </li>\n          <li>\n            Load the \"Course\" component as a nested component of \"Courses\"\n          </li>\n          <li>Add a 404 error page and render it for any unknown routes</li>\n          <li>\n            Redirect requests to /all-courses to /courses (=> Your \"Courses\"\n            page)\n          </li>\n        </ol>\n        <nav>\n          <ul style={{ listStyle: \"none\", margin: \"auto\", padding: \"0\" }}>\n            <li style={{ margin: \"10px\", display: \"inline-block\" }}>\n              <NavLink to=\"/courses\">Courses</NavLink>\n            </li>\n            <li style={{ margin: \"10px\", display: \"inline-block\" }}>\n              <NavLink to=\"/users\">Users</NavLink>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/users\" component={Users} />\n          {/*<Route path=\"/courses/:courseId\" component={Course} />*/}\n          <Route path=\"/courses\" component={Courses} />\n          <Redirect from=\"/all-courses\" to=\"/courses\" />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}