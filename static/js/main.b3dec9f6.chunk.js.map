{"version":3,"sources":["axios.js","components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["instance","axios","create","baseURL","defaults","headers","common","post","props","className","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","delete","id","then","response","console","log","this","get","setState","data","style","textAlign","body","Component","NewPost","content","postDataHandler","type","value","onChange","event","target","rows","Blog","posts","selectedPostId","error","postSelectedHandler","updatedPosts","slice","map","catch","key","href","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","interceptors","request","use","Promise","reject","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b3dec9f6.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com\"\r\n});\r\n\r\ninstance.defaults.headers.common[\"Authorization\"] = \"AUTH TOKEN FROM INSTANCE\";\r\n\r\n//instance.interceptors.request...\r\n\r\nexport default instance;\r\n","import React from \"react\";\n\nimport \"./Post.css\";\n\nconst post = props => (\n  <article className=\"Post\" onClick={props.clicked}>\n    <h1>{props.title}</h1>\n    <div className=\"Info\">\n      <div className=\"Author\">{props.author}</div>\n    </div>\n  </article>\n);\n\nexport default post;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport \"./FullPost.css\";\n\nclass FullPost extends Component {\n  state = {\n    loadedPost: null\n  };\n\n  componentDidUpdate() {\n    if (this.props.id) {\n      if (\n        !this.state.loadedPost ||\n        (this.state.loadedPost && this.state.loadedPost.id !== this.props.id)\n      ) {\n        axios.get(\"/posts/\" + this.props.id).then(response => {\n          //console.log(response);\n          this.setState({ loadedPost: response.data });\n        });\n      }\n    }\n  }\n\n  deletePostHandler = () => {\n    axios.delete(\"/posts/\" + this.props.id).then(response => {\n      console.log(response);\n    });\n  };\n\n  render() {\n    let post = <p style={{ textAlign: \"center\" }}>Please select a Post!</p>;\n    if (this.props.id) {\n      post = <p style={{ textAlign: \"center\" }}>Loading...!</p>;\n    }\n    if (this.state.loadedPost) {\n      post = (\n        <div className=\"FullPost\">\n          <h1>{this.state.loadedPost.title}</h1>\n          <p>{this.state.loadedPost.body}</p>\n          <div className=\"Edit\">\n            <button onClick={this.deletePostHandler} className=\"Delete\">\n              Delete\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return post;\n  }\n}\n\nexport default FullPost;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport \"./NewPost.css\";\n\nclass NewPost extends Component {\n  state = {\n    title: \"\",\n    content: \"\",\n    author: \"David\"\n  };\n\n  postDataHandler = () => {\n    const data = {\n      title: this.state.title,\n      body: this.state.content,\n      author: this.state.author\n    };\n    axios.post(\"/posts/\", data).then(response => {\n      console.log(response);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"NewPost\">\n        <h1>Add a Post</h1>\n        <label>Title</label>\n        <input\n          type=\"text\"\n          value={this.state.title}\n          onChange={event => this.setState({ title: event.target.value })}\n        />\n        <label>Content</label>\n        <textarea\n          rows=\"4\"\n          value={this.state.content}\n          onChange={event => this.setState({ content: event.target.value })}\n        />\n        <label>Author</label>\n        <select\n          value={this.state.author}\n          onChange={event => this.setState({ author: event.target.value })}\n        >\n          <option value=\"David\">David</option>\n          <option value=\"Manu\">Manu</option>\n        </select>\n        <button onClick={this.postDataHandler}>Add Post</button>\n      </div>\n    );\n  }\n}\n\nexport default NewPost;\n","import React, { Component } from \"react\";\n//import axios from \"axios\";\nimport axios from \"../../axios\";\n\nimport Post from \"../../components/Post/Post\";\nimport FullPost from \"../../components/FullPost/FullPost\";\nimport NewPost from \"../../components/NewPost/NewPost\";\nimport \"./Blog.css\";\n\nclass Blog extends Component {\n  state = {\n    posts: [],\n    selectedPostId: null,\n    error: false\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"/posts/\")\n      .then(response => {\n        const posts = response.data.slice(0, 4);\n        const updatedPosts = posts.map(post => {\n          return {\n            ...post,\n            author: \"Max\"\n          };\n        });\n        this.setState({ posts: updatedPosts });\n        //console.log(response);\n      })\n      .catch(error => {\n        //console.log(error);\n        this.setState({ error: true });\n      });\n  }\n\n  postSelectedHandler = id => {\n    this.setState({ selectedPostId: id });\n  };\n\n  render() {\n    let posts = <p style={{ textAlign: \"center\" }}>Something went wrong!</p>;\n    if (!this.state.error) {\n      posts = this.state.posts.map(post => {\n        return (\n          <Post\n            key={post.id}\n            title={post.title}\n            author={post.author}\n            clicked={() => this.postSelectedHandler(post.id)}\n          />\n        );\n      });\n    }\n\n    return (\n      <div className=\"Blog\">\n        <header>\n          <nav>\n            <ul>\n              <li>\n                <a href=\"/\">Home</a>\n              </li>\n              <li>\n                <a href=\"/new-post\">New Post</a>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <section className=\"Posts\">{posts}</section>\n        <section>\n          <FullPost id={this.state.selectedPostId} />\n        </section>\n        <section>\n          <NewPost />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default Blog;\n","import React, { Component } from 'react';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Blog />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://jsonplaceholder.typicode.com\";\naxios.defaults.headers.common[\"Authorization\"] = \"AUTH TOKEN\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n\naxios.interceptors.request.use(\n  request => {\n    console.log(request);\n    //Edit request config\n    return request;\n  },\n  error => {\n    console.log(error);\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  response => {\n    console.log(response);\n    //Edit request config\n    return response;\n  },\n  error => {\n    console.log(error);\n    return Promise.reject(error);\n  }\n);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}